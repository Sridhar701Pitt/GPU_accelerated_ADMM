import numpy as np
import cv2

from InvertedPendulum import InvertedPendulum

from scipy.integrate import solve_ivp

# Pendulum. Cart is fixed and cannot move.
# Y : [ theta, theta_dot ]
# returns expression for Y_dot.
def func( t, y ):
    g = 9.8 # Gravitational Acceleration
    L = 1.5 # Length of pendulum

    damping =  - 0.5*y[1]
    return [ y[1], -g/L * np.cos( y[0] )  + damping ]


# Only the pendulum moves the cart is stationary
if __name__=="__main__":
    # Solve ODE: theta_dot_dot = -g / L * cos( theta ) + delta * theta_dot
    #       Use state y as `[ theta ; theta_dot ]`. Then the above equation can
    #       be written as a function of y and t. `y_dot = f( t, y )`.
    #
    #  Given an inital state `y0` and limits of integration, we know the trajectory
    #       followed by the pendulum. The solution of this ODE is plotted with
    #       as a simulation.

    #regex commands: (\d)( )(\d) | $1, $3

    sol = solve_ivp(func, [0, 20], [ np.pi/2 + 0.1, 0 ],   t_eval=np.linspace( 0, 20, 300)  )
    # my_arr = np.array([[0.0000, 0.0000],[0.0050, 0.0050],[0.0202, 0.0202],[0.0457, 0.0457],[0.0816, 0.0816],[0.1277, 0.1277],[0.1837, 0.1837],[0.2491, 0.2491],[0.3232, 0.3232],[0.4054, 0.4054],[0.4947, 0.4947],[0.5902, 0.5902],[0.6907, 0.6907],[0.7952, 0.7952],[0.9026, 0.9026],[1.0117, 1.0117],[1.1216, 1.1216],[1.2312, 1.2312],[1.3396, 1.3396],[1.4460, 1.4460],[1.5499, 1.5499],[1.6505, 1.6505],[1.7475, 1.7475],[1.8405, 1.8405],[1.9293, 1.9293],[2.0137, 2.0137],[2.0936, 2.0936],[2.1691, 2.1691],[2.2401, 2.2401],[2.3068, 2.3068],[2.3692, 2.3692],[2.4276, 2.4276],[2.4821, 2.4821],[2.5328, 2.5328],[2.5800, 2.5800],[2.6239, 2.6239],[2.6645, 2.6645],[2.7022, 2.7022],[2.7371, 2.7371],[2.7694, 2.7694],[2.7992, 2.7992],[2.8268, 2.8268],[2.8522, 2.8522],[2.8757, 2.8757],[2.8974, 2.8974],[2.9173, 2.9173],[2.9357, 2.9357],[2.9526, 2.9526],[2.9682, 2.9682],[2.9825, 2.9825],[2.9957, 2.9957],[3.0078, 3.0078],[3.0190, 3.0190],[3.0292, 3.0292],[3.0386, 3.0386],[3.0472, 3.0472],[3.0551, 3.0551],[3.0624, 3.0624],[3.0691, 3.0691],[3.0752, 3.0752],[3.0808, 3.0808],[3.0860, 3.0860],[3.0907, 3.0907],[3.0950, 3.0950],[3.0990, 3.0990],[3.1026, 3.1026],[3.1060, 3.1060],[3.1090, 3.1090],[3.1118, 3.1118],[3.1144, 3.1144],[3.1167, 3.1167],[3.1188, 3.1188],[3.1208, 3.1208],[3.1226, 3.1226],[3.1242, 3.1242],[3.1257, 3.1257],[3.1271, 3.1271],[3.1284, 3.1284],[3.1295, 3.1295],[3.1306, 3.1306],[3.1315, 3.1315],[3.1324, 3.1324],[3.1332, 3.1332],[3.1339, 3.1339],[3.1346, 3.1346],[3.1352, 3.1352],[3.1358, 3.1358],[3.1363, 3.1363],[3.1368, 3.1368],[3.1372, 3.1372],[3.1376, 3.1376],[3.1379, 3.1379],[3.1383, 3.1383],[3.1386, 3.1386],[3.1388, 3.1388],[3.1391, 3.1391],[3.1393, 3.1393],[3.1395, 3.1395],[3.1397, 3.1397],[3.1399, 3.1399],[3.1400, 3.1400],[3.1402, 3.1402],[3.1403, 3.1403],[3.1404, 3.1404],[3.1405, 3.1405],[3.1406, 3.1406],[3.1407, 3.1407],[3.1408, 3.1408],[3.1409, 3.1409],[3.1410, 3.1410],[3.1410, 3.1410],[3.1411, 3.1411],[3.1412, 3.1412],[3.1412, 3.1412],[3.1413, 3.1413],[3.1413, 3.1413],[3.1413, 3.1413],[3.1414, 3.1414],[3.1414, 3.1414],[3.1414, 3.1414],[3.1415, 3.1415],[3.1415, 3.1415],[3.1415, 3.1415],[3.1415, 3.1415],[3.1415, 3.1415],
    #                    [3.1415, 3.1415],[3.1416, 3.1416],[3.1416, 3.1416]])
    
    #my_arr = np.array([[0.0000, 0.0000],[0.0012, 0.0012],[0.0049, 0.0049],[0.0107, 0.0107],[0.0187, 0.0187],[0.0287, 0.0287],[0.0405, 0.0405],[0.0539, 0.0539],[0.0687, 0.0687],[0.0849, 0.0849],[0.1022, 0.1022],[0.1204, 0.1204],[0.1393, 0.1393],[0.1585, 0.1585],[0.1778, 0.1778],[0.1969, 0.1969],[0.2155, 0.2155],[0.2333, 0.2333],[0.2501, 0.2501],[0.2655, 0.2655],[0.2795, 0.2795],[0.2916, 0.2916],[0.3017, 0.3017],[0.3097, 0.3097],[0.3154, 0.3154],[0.3185, 0.3185],[0.3191, 0.3191],[0.3171, 0.3171],[0.3123, 0.3123],[0.3049, 0.3049],[0.2947, 0.2947],[0.2819, 0.2819],[0.2672, 0.2672],[0.2506, 0.2506],[0.2342, 0.2342],[0.2181, 0.2181],[0.2025, 0.2025],[0.1874, 0.1874],[0.1729, 0.1729],[0.1592, 0.1592],[0.1463, 0.1463],[0.1341, 0.1341],[0.1228, 0.1228],[0.1124, 0.1124],[0.1028, 0.1028],[0.0941, 0.0941],[0.0865, 0.0865],[0.0798, 0.0798],[0.0740, 0.0740],[0.0690, 0.0690],[0.0648, 0.0648],[0.0612, 0.0612],[0.0582, 0.0582],[0.0558, 0.0558],[0.0537, 0.0537],[0.0520, 0.0520],[0.0505, 0.0505],[0.0491, 0.0491],[0.0477, 0.0477],[0.0462, 0.0462],[0.0447, 0.0447],[0.0430, 0.0430],[0.0411, 0.0411],[0.0390, 0.0390],[0.0378, 0.0378],[0.0364, 0.0364],[0.0369, 0.0369],[0.0394, 0.0394],[0.0438, 0.0438],[0.0499, 0.0499],[0.0576, 0.0576],[0.0668, 0.0668],[0.0772, 0.0772],[0.0889, 0.0889],[0.1017, 0.1017],[0.1155, 0.1155],[0.1301, 0.1301],[0.1451, 0.1451],[0.1605, 0.1605],[0.1759, 0.1759],[0.1911, 0.1911],[0.2059, 0.2059],[0.2201, 0.2201],[0.2334, 0.2334],[0.2458, 0.2458],[0.2569, 0.2569],[0.2667, 0.2667],[0.2749, 0.2749],[0.2813, 0.2813],[0.2856, 0.2856],[0.2881, 0.2881],[0.2886, 0.2886],[0.2869, 0.2869],[0.2829, 0.2829],[0.2769, 0.2769],[0.2687, 0.2687],[0.2583, 0.2583],[0.2522, 0.2522],[0.2565, 0.2565],[0.2712, 0.2712],[0.2964, 0.2964],[0.3319, 0.3319],[0.3773, 0.3773],[0.4321, 0.4321],[0.4956, 0.4956],[0.5670, 0.5670],[0.6453, 0.6453],[0.7295, 0.7295],[0.8184, 0.8184],[0.9108, 0.9108],[1.0057, 1.0057],[1.1017, 1.1017],[1.1979, 1.1979],[1.2931, 1.2931],[1.3866, 1.3866],[1.4775, 1.4775],[1.5653, 1.5653],[1.6496, 1.6496],[1.7301, 1.7301],[1.8068, 1.8068],[1.8798, 1.8798],[1.9492, 1.9492],[2.0151, 2.0151],[2.0774, 2.0774],[2.1351, 2.1351],[2.1878, 2.1878],[2.2313, 2.2313],[2.2548, 2.2548]])
    #my_arr = np.array([[0.0000, 0.0007],[0.0011, 0.0735],[0.0046, 0.1451],[0.0102, 0.2132],[0.0180, 0.2771],[0.0276, 0.3359],[0.0391, 0.3892],[0.0521, 0.4364],[0.0665, 0.4768],[0.0822, 0.5209],[0.0992, 0.5570],[0.1172, 0.5849],[0.1359, 0.6041],[0.1551, 0.6143],[0.1745, 0.6155],[0.1938, 0.6076],[0.2127, 0.5907],[0.2309, 0.5650],[0.2482, 0.5307],[0.2642, 0.4885],[0.2788, 0.4388],[0.2918, 0.3821],[0.3028, 0.3192],[0.3118, 0.2507],[0.3184, 0.1682],[0.3225, 0.0901],[0.3239, 0.0003],[0.3226, 0.0838],[0.3186, 0.1688],[0.3119, 0.2536],[0.3026, 0.3369],[0.2906, 0.4265],[0.2761, 0.5053],[0.2602, 0.5055],[0.2443, 0.5019],[0.2286, 0.4946],[0.2131, 0.4839],[0.1981, 0.4704],[0.1835, 0.4541],[0.1695, 0.4356],[0.1561, 0.4154],[0.1433, 0.3937],[0.1313, 0.3711],[0.1200, 0.3478],[0.1094, 0.3244],[0.0997, 0.2906],[0.0910, 0.2574],[0.0834, 0.2253],[0.0768, 0.1948],[0.0711, 0.1662],[0.0663, 0.1399],[0.0623, 0.1161],[0.0589, 0.0949],[0.0562, 0.0763],[0.0541, 0.0606],[0.0524, 0.0477],[0.0510, 0.0405],[0.0498, 0.0363],[0.0487, 0.0348],[0.0476, 0.0347],[0.0464, 0.0364],[0.0452, 0.0405],[0.0439, 0.0447],[0.0424, 0.0497],[0.0428, 0.0544],[0.0420, 0.0069],[0.0432, 0.0662],[0.0462, 0.1229],[0.0509, 0.1762],[0.0572, 0.2256],[0.0650, 0.2705],[0.0740, 0.2993],[0.0839, 0.3252],[0.0948, 0.3670],[0.1069, 0.4028],[0.1201, 0.4322],[0.1340, 0.4493],[0.1483, 0.4597],[0.1628, 0.4631],[0.1774, 0.4602],[0.1917, 0.4514],[0.2057, 0.4363],[0.2192, 0.4157],[0.2319, 0.3903],[0.2437, 0.3604],[0.2545, 0.3265],[0.2642, 0.2895],[0.2727, 0.2497],[0.2799, 0.2080],[0.2858, 0.1639],[0.2902, 0.1174],[0.2932, 0.0682],[0.2945, 0.0166],[0.2942, 0.0385],[0.2921, 0.0944],[0.2881, 0.1550],[0.2822, 0.2513],[0.2791, 0.0542],[0.2858, 0.3664],[0.3022, 0.6801],[0.3286, 0.9904],[0.3646, 1.2918],[0.4098, 1.5793],[0.4638, 1.8479],[0.5259, 2.0933],[0.5953, 2.3109],[0.6711, 2.4976],[0.7522, 2.6510],[0.8377, 2.7690],[0.9262, 2.8510],[1.0168, 2.8975],[1.1083, 2.9095],[1.1996, 2.8891],[1.2898, 2.8393],[1.3781, 2.7636],[1.4636, 2.6674],[1.5459, 2.5551],[1.6244, 2.4331],[1.6991, 2.3059],[1.7697, 2.1791],[1.8363, 2.0553],[1.8992, 1.9356],[1.9582, 1.8139],[2.0132, 1.6790],[2.0633, 1.5041],[2.1066, 1.2456],[2.1389, 0.8081],[2.1511, 0.0332]])
    #time = np.array([0.000000, 0.955000, 1.528000, 2.161500, 2.732000, 3.304500, 3.875500, 4.446500, 5.022500, 5.596000, 6.170500, 6.744500, 7.316000, 7.889000, 8.461000, 9.034500, 9.606500, 10.180000, 10.751500, 11.369500, 12.004000, 12.648500, 13.254500, 13.915500, 14.523000, 15.118500, 15.698500, 16.287000, 16.859000, 17.422000, 17.994000, 18.597000, 19.169500, 19.744000, 20.292500, 20.866000, 21.439000, 21.991500, 22.541000, 23.089000, 23.637000, 24.186000, 24.743000, 25.385500, 25.997500, 26.560500, 27.205500, 27.847500, 28.492000, 29.136500, 29.749500, 30.311500, 30.914500, 31.497000, 32.074000, 32.632500, 33.189500, 33.804500, 34.386000, 34.970500, 35.562000, 36.142000, 36.753500, 37.333000, 37.918500, 38.478500, 39.036000, 39.592500, 40.150500, 40.739000, 41.322000, 41.883000, 42.470500, 43.059500, 43.675000, 44.278000, 44.838500, 45.407000, 45.969500, 46.551000, 47.131500, 47.692000, 48.248500, 48.830500, 49.411500, 49.988500, 50.548500, 51.127500, 51.710500, 52.267500, 52.824000, 53.404500, 53.984000, 54.562500, 55.120000, 55.675500, 56.231500, 56.787000, 57.343500, 57.956500, 58.516500])
    my_arr = np.loadtxt('../parallel-DDP/mat.txt')
    print(my_arr.shape)
    syst = InvertedPendulum()

    for i, t in enumerate(my_arr):
        rendered = syst.step( [0,1, my_arr[i,0] - np.pi/2, 0.0 ], 0.0 )
        cv2.imshow( 'im', rendered )

        if cv2.waitKey(30) == ord('q'):
            break
    
    cv2.waitKey(0)
